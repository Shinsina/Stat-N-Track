---
import {
  db,
  eq,
  asc,
  Car,
  CarClass,
  PastSeason,
  Season,
  Standing,
  Subsession,
  SubsessionPracticeResults,
  SubsessionQualifyingResults,
  SubsessionRaceResults,
  User,
} from "astro:db";
import { connectToDatabase } from "$lib/mongodb";
import DefaultLayout from "$lib/layouts/default.astro";
import Header from "$lib/components/subsession/header.astro";
import TrackInfo from "$lib/components/track/info.astro";
import LicenseInfo from "$lib/components/subsession/licenseInfo.astro";
import RaceSummary from "$lib/components/subsession/raceSummary.astro";
import RelevantIds from "$lib/components/subsession/relevantIds.astro";
import SessionResultsTables from "$lib/components/session-results/tables.astro";
import type { Subsession as SubsessionType } from "$lib/types";
export async function getStaticPaths() {
  const subsessions = await db
    .selectDistinct({ subsession_id: Subsession.subsession_id })
    .from(Subsession);
  return subsessions.map(({ subsession_id: id }) => ({ params: { id } }));
}
const { id } = Astro.params;
const [subsession] = await db
  .select()
  .from(Subsession)
  .where(eq(Subsession.subsession_id, Number(id)));
const practiceResults = await db
  .select()
  .from(SubsessionPracticeResults)
  .where(eq(SubsessionPracticeResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionPracticeResults.finish_position));
const qualifyingResults = await db
  .select()
  .from(SubsessionQualifyingResults)
  .where(eq(SubsessionQualifyingResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionQualifyingResults.finish_position));
const raceResults = await db
  .select()
  .from(SubsessionRaceResults)
  .where(eq(SubsessionRaceResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionRaceResults.finish_position));
const [practiceResultOne] = practiceResults;
const [qualifyingResultOne] = qualifyingResults;
const [raceResultOne] = raceResults;
const session_results = [
  {
    simsession_type_name: practiceResultOne.simsession_type_name,
    simsession_name: practiceResultOne.simsession_name,
    results: practiceResults
  },
  {
    simsession_type_name: qualifyingResultOne.simsession_type_name,
    simsession_name: qualifyingResultOne.simsession_name,
    results: qualifyingResults
  },
  {
    simsession_type_name: raceResultOne.simsession_type_name,
    simsession_name: raceResultOne.simsession_name,
    results: raceResults,
  }
]
const {
  track,
  corners_per_lap: cornersPerLap,
  allowed_licenses: licenses,
  license_category: licenseCategory,
} = subsession || {};
const title = `Subsession - ${id}`;
const description = `Subsession information for subsession - ${id}`;
---

<DefaultLayout {title} {description}>
  <div class="grid grid-cols-12">
    <div class="col-span-4 border-2 grid grid-rows-12">
      <div class="row-span-1"></div>
      <TrackInfo {cornersPerLap} {track} />
      <LicenseInfo {licenses} {licenseCategory} />
    </div>
    <div class="col-span-4 border-2">
      <Header {subsession} />
      <RaceSummary {subsession} />
    </div>
    <div class="col-span-4 border-2 grid grid-rows-12">
      <div class="row-span-1"></div>
      <RelevantIds {subsession} sessions={session_results} />
    </div>
  </div>
  <SessionResultsTables sessions={session_results} />
  <script>
    import Alpine from "alpinejs";
    import Table from "../../lib/components/table/index.ts";
    Alpine.data("tables", () => ({
      PRACTICE: false,
      QUALIFY: false,
      HEAT: false,
      RACE: false,
      toggle() {
        this.$el.id.split(" ").forEach((id, index) => {
          if (index) {
            // @ts-expect-error
            this[id] = false;
          } else {
            // @ts-expect-error
            this[id] = !this[id];
          }
        });
      },
    }));
    Alpine.data("PRACTICE", Table);
    Alpine.data("QUALIFY", Table);
    Alpine.data("HEAT", Table);
    Alpine.data("RACE", Table);
    Alpine.start();
  </script>
</DefaultLayout>
