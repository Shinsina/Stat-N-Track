---
import {
  db,
  eq,
  asc,
  Subsession,
  SubsessionPracticeResults,
  SubsessionQualifyingResults,
  SubsessionRaceResults,
} from "astro:db";
import DefaultLayout from "$lib/layouts/default.astro";
import Header from "$lib/components/subsession/header.astro";
import TrackInfo from "$lib/components/track/info.astro";
import LicenseInfo from "$lib/components/subsession/licenseInfo.astro";
import RaceSummary from "$lib/components/subsession/raceSummary.astro";
import RelevantIds from "$lib/components/subsession/relevantIds.astro";
import SessionResultsTables from "$lib/components/session-results/tables.astro";
export async function getStaticPaths() {
  const subsessions = await db
    .selectDistinct({ subsession_id: Subsession.subsession_id })
    .from(Subsession);
  return subsessions.map(({ subsession_id: id }) => ({ params: { id } }));
}
const { id } = Astro.params;
const [subsession] = await db
  .select()
  .from(Subsession)
  .where(eq(Subsession.subsession_id, Number(id)));
const practiceResults = await db
  .select()
  .from(SubsessionPracticeResults)
  .where(eq(SubsessionPracticeResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionPracticeResults.finish_position));
const qualifyingResults = await db
  .select()
  .from(SubsessionQualifyingResults)
  .where(eq(SubsessionQualifyingResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionQualifyingResults.finish_position));
const raceResults = await db
  .select()
  .from(SubsessionRaceResults)
  .where(eq(SubsessionRaceResults.subsession_id, Number(id)))
  .orderBy(asc(SubsessionRaceResults.finish_position));
const [practiceResultOne] = practiceResults || [{}];
const [qualifyingResultOne] = qualifyingResults || [{}];
const splitRaceResults = raceResults.find((result) =>
  result.simsession_name.match(/HEAT/i)
)
  ? raceResults.reduce(
      (object: Record<string, Array<typeof raceResult>>, raceResult) => {
        const { simsession_name } = raceResult;
        if (simsession_name.match(/HEAT/i)) {
          object.heatResults.push(raceResult);
        } else {
          object.mainResults.push(raceResult);
        }
        return object;
      },
      { heatResults: [], mainResults: [] }
    )
  : { heatResults: [], mainResults: [] };
const session_results = [
  {
    simsession_type_name:
      practiceResultOne?.simsession_type_name || "Open Practice",
    simsession_name: practiceResultOne?.simsession_name || "PRACTICE",
    results: practiceResults,
  },
  {
    simsession_type_name:
      qualifyingResultOne?.simsession_type_name || "Lone Qualifying",
    simsession_name: qualifyingResultOne?.simsession_name || "QUALIFY",
    results: qualifyingResults,
  },
];
const { heatResults, mainResults } = splitRaceResults;
if (heatResults.length && mainResults.length) {
  const [heatResultOne] = heatResults;
  const [mainResultOne] = mainResults;
  session_results.push(
    ...[
      {
        simsession_type_name: heatResultOne?.simsession_type_name || "Race",
        simsession_name: heatResultOne?.simsession_name || "HEAT",
        results: heatResults,
      },
      {
        simsession_type_name: mainResultOne?.simsession_type_name || "Race",
        simsession_name: mainResultOne?.simsession_name || "RACE",
        results: mainResults,
      },
    ]
  );
} else {
  const [raceResultOne] = raceResults || [{}];
  session_results.push({
    simsession_type_name: raceResultOne.simsession_type_name || "Race",
    simsession_name: raceResultOne.simsession_name || "RACE",
    results: raceResults,
  });
}
const {
  track,
  corners_per_lap: cornersPerLap,
  allowed_licenses: licenses,
  license_category: licenseCategory,
} = subsession || {};
const title = `Subsession - ${id}`;
const description = `Subsession information for subsession - ${id}`;
---

<DefaultLayout {title} {description}>
  <div class="grid grid-cols-12">
    <div class="col-span-12 md:col-span-6 border-2 pt-4">
      <Header {subsession} />
      <RaceSummary {subsession} />
    </div>
    <div class="col-span-12 md:col-span-6 border-2">
      <TrackInfo {cornersPerLap} {track} />
      <LicenseInfo {licenses} {licenseCategory} />
      <RelevantIds {subsession} sessions={session_results} />
    </div>
  </div>
  <SessionResultsTables sessions={session_results} />
</DefaultLayout>
