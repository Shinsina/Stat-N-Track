---
import Header from '$lib/components/subsession/header.astro';
import TrackInfo from '$lib/components/track/info.astro';
import LicenseInfo from '$lib/components/subsession/licenseInfo.astro';
import RaceSummary from '$lib/components/subsession/raceSummary.astro';
import RelevantIds from '$lib/components/subsession/relevantIds.astro';
import SessionResultsTables from '$lib/components/session-results/tables.astro';
const { id } = Astro.params;
const response = await fetch(`http://localhost:3000/api/subsession/${id}.json`);
const subsession = await response.json();
const {
		track,
		session_results,
		corners_per_lap: cornersPerLap,
		allowed_licenses: licenses,
		license_category: licenseCategory
	} = subsession || {};
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/Stat-N-Track/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Subsession: {id}</title>
	</head>
	<body class="bg-gray-900 text-white font-sans pt-2">
		<div class="grid grid-cols-12">
			<div class="col-span-4 border-2 grid grid-rows-12">
				<div class="row-span-1"></div>
				<TrackInfo {cornersPerLap} {track} />
				<LicenseInfo {licenses} {licenseCategory} />
			</div>
			<div class="col-span-4 border-2">
				<Header {subsession} />
				<RaceSummary {subsession} />
			</div>
			<div class="col-span-4 border-2 grid grid-rows-12">
				<div class="row-span-1"></div>
				<RelevantIds {subsession} sessions={session_results}  />
			</div>
		</div>
		<SessionResultsTables sessions={session_results} />
		<script>
			import Alpine from 'alpinejs';
			Alpine.data('tables', () => ({
				PRACTICE: false,
				QUALIFY: false,
				RACE: false,
				toggle() {
					this.$el.id.split(' ').forEach((id, index) => {
						if (index) {
							this[id] = false
						} else {
							this[id] = !this[id];
						}
					});
				},
				sort() {
					const [tableName, columnName, rowCount, direction] = this.$el.id.split(' ');
					const rows = new Map();
					const keys = new Set();
					for (let rowNumber = 0; rowNumber < rowCount; rowNumber += 1) {
						const initialValue = this.$refs[`${tableName} ${columnName} ${rowNumber}`].innerText;
						const value = Number.isNaN(Number(initialValue)) ? initialValue : Number(initialValue);
						if (rows.get(value)) {
							rows.set(value, [...rows.get(value), rowNumber]);
						} else {
							rows.set(value, [rowNumber]);
							keys.add(value);
						}
					}
					const keysArray = Array.from(keys);
					const isNumbers = keysArray.filter((key) => typeof key === 'number').length;
					const internalSort = () => {
						if (isNumbers && (direction === 'ascending')) {
							return keysArray.sort((a, b) => {
								return b - a;
							});
						} else if (isNumbers && !direction) {
							return keysArray.sort((a, b) => {
								return a - b;
							});
						} else if (!isNumbers && direction === 'ascending') {
							return keysArray.sort();
						} else if (!isNumbers && !direction) {
							return keysArray.sort().reverse();
						}
					}
					this.$el.id = direction === 'ascending' ? `${tableName} ${columnName} ${rowCount}` : `${tableName} ${columnName} ${rowCount} ascending`;
					const rowElements = direction === 'ascending' ? internalSort().map((key) => key).map((key) => rows.get(key)).flat().map((value) => this.$refs[`${tableName} ${value}`].outerHTML) : internalSort().map((key) => key).map((key) => rows.get(key)).flat().map((value) => this.$refs[`${tableName} ${value}`].outerHTML);
					const tableHeadings = this.$refs[`${tableName} Table Headings`].outerHTML;
					this.$refs[tableName].innerHTML = `${tableHeadings}${rowElements.join('')}`;
				}
			}))
			Alpine.start();
		</script>
	</body>
</html>
