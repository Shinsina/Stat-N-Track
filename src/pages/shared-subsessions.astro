---
import { connectToDatabase } from "$lib/mongodb";
import type { Session, SessionResult, Subsession } from "$lib/types";
import DefaultLayout from "$lib/layouts/default.astro";
import RaceResults from "$lib/components/session-results/race.astro";
import userIds from "$lib/utils/user-ids";
import parseLapTime from "$lib/utils/parse-lap-time";
import fieldIdToLabelMap from "$lib/utils/field-id-to-label-map";
import keysToDisplay from "$lib/utils/race-session-keys-to-display";
const dbConnection = await connectToDatabase();
const { db } = dbConnection;
const collection = db.collection<Subsession>("subsessions");
const $and = userIds.map((userId) => ({
  "session_results.2.results": { $elemMatch: { cust_id: userId } },
}));
const subsessions = await collection.find({ $and }).sort({ _id: -1 }).toArray();
const headToHeadWins: Record<string,Array<number>> = {};
const results: Array<{
  subsessionInfo: Record<string, unknown>;
  session: Session;
}> = subsessions.map((subsession: Subsession) => {
  const {
    subsession_id,
    track,
    allowed_licenses,
    license_category,
    event_average_lap,
    event_laps_complete,
    event_strength_of_field,
    num_caution_laps,
    num_cautions,
    num_lead_changes,
    race_week_num,
    season_name,
  } = subsession;
  // Current Users in race session
  const results = subsession.session_results[2].results
    .filter((v: SessionResult) => userIds.includes(v.cust_id))
    .map((w: SessionResult) => {
      return Object.keys(w).reduce((object, key) => {
        if (keysToDisplay.has(key)) {
          // @ts-ignore
          object[key] = w[key];
        }
        return object;
      }, {} as SessionResult);
    })
    .sort((x: SessionResult, y: SessionResult) => {
      if (x.finish_position > y.finish_position) {
        return 1;
      } else if (y.finish_position > x.finish_position) {
        return -1;
      }
      return 0;
    });
  const [winner] = results;
  const { display_name } = winner;
  if(headToHeadWins[display_name]) {
    headToHeadWins[display_name].push(subsession_id)
  } else {
    headToHeadWins[display_name] = [subsession_id];
  }
  const { group_name: License } = allowed_licenses.slice(0, 2).pop() || {};
  const session = {
    simsession_number: 0,
    simsession_type: 0,
    simsession_type_name: "",
    simsession_subtype: 0,
    simsession_name: "",
    results,
  };
  return {
    subsessionInfo: {
      subsession_id,
      Track: `${track.track_name} ${
        track.config_name !== "N/A" ? track.config_name : ""
      }`,
      License,
      license_category,
      event_average_lap,
      event_laps_complete,
      event_strength_of_field,
      num_caution_laps,
      num_cautions,
      num_lead_changes,
      race_week_num,
      season_name,
    },
    session,
  };
});
export const handleKey = ({
  key,
  subsessionInfo,
}: {
  key: string;
  subsessionInfo: Record<string, unknown>;
}) => {
  if (key === "subsession_id") {
    return `<a class="underline" x-on:click="toggle" id="toggle${subsessionInfo[key]}">${subsessionInfo[key]}</a>`;
  }
  if (key === "event_average_lap") {
    return parseLapTime(Number(subsessionInfo[key]));
  }
  if (key === "race_week_num") {
    return String(Number(subsessionInfo[key]) + 1);
  }
  return String(subsessionInfo[key]);
};
const correctlyKeyedH2HWins = Object.keys((headToHeadWins)).reduce((object, key) => {
  const wins = headToHeadWins[key].length;
  object[key] = { key, wins };
  return object;
}, {} as Record<string,{ key: string, wins: number }>);
const h2hOutput = Object.keys(correctlyKeyedH2HWins).map((key) => correctlyKeyedH2HWins[key]).sort((a, b) => {
  if (a.wins > b.wins) {
    return -1;
  } else if (b.wins > a.wins) {
    return 1;
  }
   return 0;
});
---

<DefaultLayout>
  <div class="text-center lg:text-2xl md:text-md sm:text-sm py-4">
    <div class="font-bold">Head to Head Wins</div>
    {h2hOutput.map((value) => (
      <div>{value.key}: {value.wins}</div>
    ))}
  </div>
  <div
    id="top"
    x-data={JSON.stringify(
      results.reduce((object, result) => {
        //@ts-expect-error
        object.previouslyToggled = "";
        //@ts-expect-error
        object[`toggle${result.subsessionInfo.subsession_id}`] = false;
        return object;
      }, {})
    )}
  >
    <div
      x-data="{ toggle() { if(this.previouslyToggled){ this[this.previouslyToggled] = !this[this.previouslyToggled];}; this.previouslyToggled = this.$el.id; this[this.$el.id] = !this[this.$el.id]; window.location.href = '#top' } }"
    >
      {
        results.map((result) => (
          <div
            id={String(result.subsessionInfo.subsession_id)}
            x-cloak
            x-show={`toggle${result.subsessionInfo.subsession_id}`}
            x-transition:enter.duration.500ms
            x-transition:leave.duration.0ms
          >
            <a
              class="underline"
              rel="prefetch"
              href={`/Stat-N-Track/subsession/${result.subsessionInfo.subsession_id}`}
            >
              <div class="text-center py-4 border-2">
                <p>
                  <b>View Complete Subsession Results</b>
                </p>
              </div>
            </a>
            <RaceResults session={result.session} />
          </div>
        ))
      }
      <div class="grid grid-cols-1 pt-6">
        <table x-ref="Table" x-data="table" class="text-center col-span-1">
          <tr x-ref="Headings">
            {
              Object.keys(results[0].subsessionInfo).map((key) => (
                <th
                  id={`Table ${key} ${results.length}`}
                  class="border-2"
                  x-on:click="sort"
                >
                  {fieldIdToLabelMap.get(key) || key}
                </th>
              ))
            }
          </tr>
          {
            results.map((result, rowNumber) => (
              <tr x-ref={`Table ${rowNumber}`}>
                {Object.keys(result.subsessionInfo).map((key) => (
                  <td
                    x-ref={`Table ${key} ${rowNumber}`}
                    id={`${key}~${rowNumber}~${result.subsessionInfo[key]}`}
                    class="border-2"
                  >
                    <Fragment
                      set:html={handleKey({
                        key,
                        subsessionInfo: result.subsessionInfo,
                      })}
                    />
                  </td>
                ))}
              </tr>
            ))
          }
        </table>
      </div>
    </div>
  </div>
  <script>
    import Alpine from "alpinejs";
    import Table from "$lib/components/table";
    Alpine.data("table", Table);
    Alpine.data("RACE", Table);
    Alpine.start();
  </script>
</DefaultLayout>
