---
import {
  db,
  gt,
  sql,
  count,
  desc,
  Subsession,
  SubsessionRaceResults,
} from "astro:db";
import DefaultLayout from "$lib/layouts/default.astro";
import RaceResults from "$lib/components/session-results/race.astro";
import userIds from "$lib/utils/user-ids";
import parseLapTime from "$lib/utils/parse-lap-time";
import fieldIdToLabelMap from "$lib/utils/field-id-to-label-map";
import { bgColorByUserDisplayName } from "$lib/utils/background-color-by-user";
import type { Track } from "$lib/types";
const sharedRaceSessions = await db
  .select({
    subsession_id: SubsessionRaceResults.subsession_id,
    count: count(SubsessionRaceResults.subsession_id),
  })
  .from(SubsessionRaceResults)
  .where(
    sql`${SubsessionRaceResults.cust_id} IN ${userIds} AND ${SubsessionRaceResults.simsession_number} = 0 GROUP BY ${SubsessionRaceResults.subsession_id}`
  )
  .having(({ count }) => gt(count, 1));
const sharedSubsessionIds = sharedRaceSessions.map((v) => v.subsession_id);
const sharedSubsessions = await db
  .select()
  .from(Subsession)
  .where(sql`${Subsession.subsession_id} IN ${sharedSubsessionIds}`)
  .orderBy(desc(Subsession.subsession_id));
const sharedSubsessionRaceResults = await db
  .select()
  .from(SubsessionRaceResults)
  .where(
    sql`${SubsessionRaceResults.cust_id} IN ${userIds} AND ${SubsessionRaceResults.simsession_number} = 0 AND ${SubsessionRaceResults.subsession_id} IN ${sharedSubsessionIds}`
  );
const subsessionIdToSharedRaceResultsMap = sharedSubsessionRaceResults.reduce(
  (map: Map<number, Array<typeof value>>, value) => {
    const { subsession_id } = value;
    const currentValue = map.get(subsession_id);
    if (currentValue) {
      map.set(subsession_id, [...currentValue, value]);
    } else {
      map.set(subsession_id, [value]);
    }
    return map;
  },
  new Map()
);
const headToHeadWins: Record<string, Array<number>> = {};
const results = sharedSubsessions.map((subsession) => {
  const {
    subsession_id,
    track,
    allowed_licenses,
    license_category,
    event_average_lap,
    event_laps_complete,
    event_strength_of_field,
    num_caution_laps,
    num_cautions,
    num_lead_changes,
    race_week_num,
    season_name,
  } = subsession;
  // Current Users in race session
  const subsessionResultsForId =
    subsessionIdToSharedRaceResultsMap.get(subsession_id);
  const results =
    subsessionResultsForId && Array.isArray(subsessionResultsForId)
      ? subsessionResultsForId.sort((x, y) => {
          if (x.finish_position > y.finish_position) {
            return 1;
          } else if (y.finish_position > x.finish_position) {
            return -1;
          }
          return 0;
        })
      : [];

  const [winner] = results;
  const { display_name, simsession_type_name } = winner;
  const session = {
    simsession_type_name,
    results,
  };
  if (headToHeadWins[display_name]) {
    headToHeadWins[display_name].push(subsession_id);
  } else {
    headToHeadWins[display_name] = [subsession_id];
  }
  const { group_name: License } = Array.isArray(allowed_licenses)
    ? allowed_licenses.slice(0, 2).pop()
    : { group_name: "" };
  const assertTrackAsTrackType = () => track as Track;
  const trackInfo = assertTrackAsTrackType();
  return {
    subsessionInfo: {
      subsession_id,
      Track: `${trackInfo.track_name} ${
        trackInfo.config_name !== "N/A" ? trackInfo.config_name : ""
      }`,
      License,
      license_category,
      event_average_lap,
      event_laps_complete,
      event_strength_of_field,
      num_caution_laps,
      num_cautions,
      num_lead_changes,
      race_week_num,
      season_name,
    },
    session,
  };
});
export const handleKey = ({
  key,
  subsessionInfo,
}: {
  key: string;
  subsessionInfo: Record<string, unknown>;
}) => {
  if (key === "subsession_id") {
    return `<a class="underline" x-on:click="toggle" id="toggle${subsessionInfo[key]}">${subsessionInfo[key]}</a>`;
  }
  if (key === "event_average_lap") {
    return parseLapTime(Number(subsessionInfo[key]));
  }
  if (key === "race_week_num") {
    return String(Number(subsessionInfo[key]) + 1);
  }
  return String(subsessionInfo[key]);
};
const correctlyKeyedH2HWins = Object.keys(headToHeadWins).reduce(
  (object, key) => {
    const wins = headToHeadWins[key].length;
    object[key] = { key, wins };
    return object;
  },
  {} as Record<string, { key: string; wins: number }>
);
const h2hOutput = Object.keys(correctlyKeyedH2HWins)
  .map((key) => correctlyKeyedH2HWins[key])
  .sort((a, b) => {
    if (a.wins > b.wins) {
      return -1;
    } else if (b.wins > a.wins) {
      return 1;
    }
    return 0;
  });
const title = "Shared Subsessions";
const description = "Shared subsessions for all Stat 'n' Track users";
---

<DefaultLayout {title} {description}>
  <div class="flex flex-col">
    <div class="self-center text-center lg:text-2xl md:text-md sm:text-sm py-4">
      <div class="font-bold border-b-2 border-white">Head to Head Wins</div>
      {
        h2hOutput.map((value) => (
          <div class={bgColorByUserDisplayName(value.key)}>
            {value.key}: {value.wins}
          </div>
        ))
      }
    </div>
  </div>
  <div
    id="top"
    x-data={JSON.stringify(
      results.reduce((object: Record<string, unknown>, result) => {
        object.previouslyToggled = "";
        object[`toggle${result.subsessionInfo.subsession_id}`] = false;
        return object;
      }, {})
    )}
  >
    <div
      x-data="{ toggle() { if(this.previouslyToggled){ this[this.previouslyToggled] = !this[this.previouslyToggled];}; this.previouslyToggled = this.$el.id; this[this.$el.id] = !this[this.$el.id]; window.location.href = '#top' } }"
    >
      {
        results.map((result) => (
          <div
            id={String(result.subsessionInfo.subsession_id)}
            x-cloak
            x-show={`toggle${result.subsessionInfo.subsession_id}`}
            x-transition:enter.duration.500ms
            x-transition:leave.duration.0ms
          >
            <a
              class="underline"
              rel="prefetch"
              href={`/Stat-N-Track/subsession/${result.subsessionInfo.subsession_id}`}
            >
              <div class="text-center py-4 border-2">
                <p>
                  <b>View Complete Subsession Results</b>
                </p>
              </div>
            </a>
            <RaceResults session={result.session} />
          </div>
        ))
      }
      <div class="grid grid-cols-1 pt-6">
        <table x-ref="Table" x-data="table" class="text-center col-span-1">
          <tr x-ref="Headings">
            {
              Object.keys(results[0].subsessionInfo).map((key) => (
                <th
                  id={`Table ${key} ${results.length}`}
                  class="border-2"
                  x-on:click="sort"
                >
                  {fieldIdToLabelMap.get(key) || key}
                </th>
              ))
            }
          </tr>
          {
            results.map((result, rowNumber) => (
              <tr
                x-ref={`Table ${rowNumber}`}
                class={bgColorByUserDisplayName(
                  result.session.results[0].display_name
                )}
              >
                {Object.keys(result.subsessionInfo).map((key) => (
                  <td
                    x-ref={`Table ${key} ${rowNumber}`}
                    id={`${key}~${rowNumber}~${result.subsessionInfo[key]}`}
                    class="border-2"
                  >
                    <Fragment
                      set:html={handleKey({
                        key,
                        subsessionInfo: result.subsessionInfo,
                      })}
                    />
                  </td>
                ))}
              </tr>
            ))
          }
        </table>
      </div>
    </div>
  </div>
</DefaultLayout>
