---
import {
  db,
  desc,
  eq,
  and,
  sql,
  Standing,
  Subsession,
  SubsessionRaceResults,
} from "astro:db";
import SubsessionsLayout from "$lib/layouts/subsessions.astro";
import userIds from "$lib/utils/user-ids";
export async function getStaticPaths() {
  const mappings = await Promise.all(
    userIds.map(async (userId) => {
      const values = await db
        .selectDistinct({ car_class_id: Standing.car_class_id })
        .from(Standing)
        .where(eq(Standing.cust_id, Number(userId)));
      const carClassIds = values.map((value) => Number(value.car_class_id));
      return { userId, carClassIds };
    })
  );
  return mappings
    .map((mapping) => {
      const { userId, carClassIds } = mapping;
      return carClassIds.map((carClassId: number) => ({
        params: { id: userId, carClassId },
      }));
    })
    .flat();
}

const { id, carClassId } = Astro.params;
const seoTitle = `Subsessions list for user ID - ${id} and car class ID - ${carClassId}`;
const seoDescription = seoTitle;
const subsessionRaceResults = await db
  .select()
  .from(SubsessionRaceResults)
  .where(
    and(
      eq(SubsessionRaceResults.cust_id, Number(id)),
      eq(SubsessionRaceResults.car_class_id, Number(carClassId))
    )
  );
const subsessionsWithoutResult = await db
  .select()
  .from(Subsession)
  .where(
    sql`${Subsession.subsession_id} IN ${subsessionRaceResults.map((subsession) => subsession.subsession_id)}`
  )
  .orderBy(desc(Subsession.subsession_id));
const subsessions = subsessionsWithoutResult.map((subsessionWithoutResult) => {
  const { subsession_id } = subsessionWithoutResult;
  const userResult = subsessionRaceResults.find(
    (subsessionRaceResult) =>
      subsessionRaceResult.subsession_id === subsession_id
  );
  return {
    ...subsessionWithoutResult,
    userResult,
  };
});
---

<SubsessionsLayout {id} {seoTitle} {seoDescription} {subsessions} />
