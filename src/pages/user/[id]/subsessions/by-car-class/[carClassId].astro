---
import {
  db,
  desc,
  eq,
  and,
  sql,
  Standing,
  Subsession,
  SubsessionRaceResults,
} from "astro:db";
import SubsessionsLayout from "$lib/layouts/subsessions.astro";
import userIds from "$lib/utils/user-ids";
export async function getStaticPaths() {
  const mappings = await Promise.all(
    userIds.map(async (userId) => {
      const values = await db
        .selectDistinct({ car_class_id: Standing.car_class_id })
        .from(Standing)
        .where(eq(Standing.cust_id, Number(userId)));
      const carClassIds = values.map((value) => Number(value.car_class_id));
      return { userId, carClassIds };
    })
  );
  return mappings
    .map((mapping) => {
      const { userId, carClassIds } = mapping;
      return carClassIds.map((carClassId: number) => ({
        params: { id: userId, carClassId },
      }));
    })
    .flat();
}

const { id, carClassId } = Astro.params;
const seoTitle = `Subsessions list for user ID - ${id} and car class ID - ${carClassId}`;
const seoDescription = seoTitle;
const rawSubsessions = await db
  .select({
    subsession_id: Subsession.subsession_id,
    track: Subsession.track,
    corners_per_lap: Subsession.corners_per_lap,
    allowed_licenses: Subsession.allowed_licenses,
    license_category: Subsession.license_category,
    finish_position: SubsessionRaceResults.finish_position,
    finish_position_in_class: SubsessionRaceResults.finish_position_in_class,
    laps_lead: SubsessionRaceResults.laps_lead,
    laps_complete: SubsessionRaceResults.laps_complete,
    average_lap: SubsessionRaceResults.average_lap,
    best_lap_time: SubsessionRaceResults.best_lap_time,
    reason_out: SubsessionRaceResults.reason_out,
    champ_points: SubsessionRaceResults.champ_points,
    starting_position: SubsessionRaceResults.starting_position,
    starting_position_in_class:
      SubsessionRaceResults.starting_position_in_class,
    car_class_short_name: SubsessionRaceResults.car_class_short_name,
    division_name: SubsessionRaceResults.division_name,
    new_license_level: SubsessionRaceResults.new_license_level,
    new_cpi: SubsessionRaceResults.new_cpi,
    newi_rating: SubsessionRaceResults.newi_rating,
    incidents: SubsessionRaceResults.incidents,
    car_name: SubsessionRaceResults.car_name,
    aggregate_champ_points: SubsessionRaceResults.aggregate_champ_points,
  })
  .from(SubsessionRaceResults)
  .innerJoin(
    Subsession,
    eq(SubsessionRaceResults.subsession_id, Subsession.subsession_id)
  )
  .where(
    and(
      eq(SubsessionRaceResults.cust_id, Number(id)),
      eq(SubsessionRaceResults.car_class_id, Number(carClassId)),
      sql`${SubsessionRaceResults.simsession_name} IN ${["RACE", "FEATURE", "N/A"]}`
    )
  )
  .orderBy(desc(Subsession.subsession_id));
const subsessions = rawSubsessions.map((subsession) => {
  const {
    subsession_id,
    track,
    corners_per_lap,
    allowed_licenses,
    license_category,
    ...rest
  } = subsession;
  const Subsession = {
    subsession_id,
    track,
    corners_per_lap,
    allowed_licenses,
    license_category,
  };
  return { Subsession, SubsessionRaceResults: rest };
});
---

<SubsessionsLayout {id} {seoTitle} {seoDescription} {subsessions} />
