---
import { connectToDatabase } from "$lib/mongodb";
import SubsessionsLayout from "$lib/layouts/subsessions.astro";
import userIds from "$lib/utils/user-ids";
import type { UserIdCarClassIdsMapping } from "$lib/types";
export async function getStaticPaths() {
  const dbConnection = await connectToDatabase();
  const db = dbConnection.db;
  const collection = db.collection("standings");
  const mappings: Array<UserIdCarClassIdsMapping> = await Promise.all(
    userIds.map(async (userId) => ({
      userId,
      carClassIds: await collection.distinct("car_class_id", {
        "season_driver_data.cust_id": Number(userId),
      }),
    }))
  );
  return mappings
    .map((mapping) => {
      const { userId, carClassIds } = mapping;
      return carClassIds.map((carClassId) => ({
        params: { id: userId, carClassId },
      }));
    })
    .flat();
}

const { id, carClassId } = Astro.params;
const dbConnection = await connectToDatabase();
const { db } = dbConnection;
const collection = db.collection("subsessions");
const subsessions = await collection
  .find({
    "session_results.2.results": {
      $elemMatch: { cust_id: Number(id), car_class_id: Number(carClassId) },
    },
  })
  .sort({ _id: -1 })
  .toArray();
---

<SubsessionsLayout {id} {subsessions} />
