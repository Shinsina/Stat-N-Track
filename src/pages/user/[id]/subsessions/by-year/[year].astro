---
import { connectToDatabase } from "$lib/mongodb";
import SubsessionsLayout from "$lib/layouts/subsessions.astro";
import userIds from "$lib/utils/user-ids";
import type { UserIdYearsMapping } from "$lib/types";
export async function getStaticPaths() {
  const dbConnection = await connectToDatabase();
  const db = dbConnection.db;
  const collection = db.collection("subsessions");
  const mappings: Array<UserIdYearsMapping> = await Promise.all(
    userIds.map(async (userId) => ({
      userId,
      years: await collection.distinct("season_year", {
        "session_results.2.results": { $elemMatch: { cust_id: userId } },
      }),
    }))
  );
  return mappings
    .map((mapping) => {
      const { userId, years } = mapping;
      return years.map((year) => ({ params: { id: userId, year } }));
    })
    .flat();
}
const { id, year } = Astro.params;
const dbConnection = await connectToDatabase();
const { db } = dbConnection;
const collection = db.collection("subsessions");
const subsessions = await collection
  .find({
    season_year: Number(year),
    "session_results.2.results": { $elemMatch: { cust_id: Number(id) } },
  })
  .sort({ _id: -1 })
  .toArray();
---

<SubsessionsLayout {id} {subsessions} />
