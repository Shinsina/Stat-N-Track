---
import {
  db,
  eq,
  desc,
  sql,
  like,
  and,
  SubsessionRaceResults,
  Subsession,
} from "astro:db";
import SubsessionsLayout from "$lib/layouts/subsessions.astro";
import userIds from "$lib/utils/user-ids";
import type { Track } from "$lib/types";
import generateTrackMap from "$lib/utils/generate-track-map";
export async function getStaticPaths() {
  const mappings = await Promise.all(
    userIds.map(async (userId) => {
      const tracks = await db
        .selectDistinct({ track: Subsession.track })
        .from(Subsession)
        .innerJoin(
          SubsessionRaceResults,
          eq(Subsession.subsession_id, SubsessionRaceResults.subsession_id)
        )
        .where(eq(SubsessionRaceResults.cust_id, Number(userId)));
      return { userId, tracks };
    })
  );
  return mappings
    .map((mapping) => {
      const { userId, tracks } = mapping;
      return tracks.map((trackMapping) => {
        const { track } = trackMapping as { track: Track };
        return {
          params: {
            id: userId,
            trackSlug: `${track.track_name} ${track.config_name}`
              .toLowerCase()
              .replace(/[\(\)\[\]]/g, "")
              .replace(/[ \/]/g, "-")
              .replace("---", "-")
              .replace("-n-a", ""),
          },
        };
      });
    })
    .flat();
}
const { id, trackSlug } = Astro.params;
const seoTitle = `Subsessions list for user ID - ${id} and track - ${trackSlug}`;
const seoDescription = seoTitle;
const tracksFromDb: Array<{ track: unknown | Track }> = await db
  .selectDistinct({ track: Subsession.track })
  .from(Subsession)
  .innerJoin(
    SubsessionRaceResults,
    eq(Subsession.subsession_id, SubsessionRaceResults.subsession_id)
  );
const tracks = tracksFromDb as Array<{ track: Track }>;
const generatedTrackMap = generateTrackMap({ tracks });
const { trackName, configName } = generatedTrackMap.get(trackSlug) || {};
const subsessions = await db
  .select()
  .from(Subsession)
  .innerJoin(
    SubsessionRaceResults,
    eq(Subsession.subsession_id, SubsessionRaceResults.subsession_id)
  )
  .where(
    and(
      like(Subsession.track, `%${trackName}%`),
      like(Subsession.track, `%${configName}%`),
      sql`${SubsessionRaceResults.cust_id} IS ${id} AND ${SubsessionRaceResults.simsession_name} IN ${["RACE", "FEATURE", "N/A"]}`
    )
  )
  .orderBy(desc(Subsession.subsession_id));
---

<SubsessionsLayout {id} {seoTitle} {seoDescription} {subsessions} />
