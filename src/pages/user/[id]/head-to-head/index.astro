---
import {
  db,
  gt,
  sql,
  count,
  SubsessionRaceResults,
} from "astro:db";
import DefaultLayout from "$lib/layouts/default.astro";
import userIds from "$lib/utils/user-ids";
import userIdToNameMap from "$lib/utils/user-id-to-name-map";
export function getStaticPaths() {
  return userIds.map((id) => ({ params: { id } }));
}
const { id } = Astro.params;
const title = `Shared Subsession Head To Head Matchups - ${id}`;
const description = title;
const allOtherIds = userIds.filter((userId) => Number(userId) !== Number(id));
const otherIdSubsessionCountMappings = await Promise.all(allOtherIds.map(async (otherId) => {
  const sharedSubsessionsBetweenIds = await db
  .select({
    subsession_id: SubsessionRaceResults.subsession_id,
    count: count(SubsessionRaceResults.subsession_id),
  })
  .from(SubsessionRaceResults)
  .where(
    sql`${SubsessionRaceResults.cust_id} IN ${[id, otherId]} AND ${SubsessionRaceResults.simsession_number} = 0 GROUP BY ${SubsessionRaceResults.subsession_id}`
  )
  .having(({ count }) => gt(count, 1));
    return { otherId, sharedSubsessionCount: sharedSubsessionsBetweenIds.length }
  }));
---

<DefaultLayout {id} {title} {description}>
  <div class="text-center text-3xl">
    {otherIdSubsessionCountMappings.filter((mapping) => mapping.sharedSubsessionCount).map(({ otherId }) => (<div><a class="underline" href=`/Stat-N-Track/user/${id}/head-to-head/${otherId}`>{userIdToNameMap.get(otherId)}</a></div>))}
  </div>
</DefaultLayout>
