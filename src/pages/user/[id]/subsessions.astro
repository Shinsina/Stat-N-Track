---
import handleSessionResults from '$lib/utils/handle-session-results';
import fieldIdToLabelMap from '$lib/utils/field-id-to-label-map';
import { connectToDatabase } from '$lib/mongodb';
export function getStaticPaths() {
	return [
		{ params: { id: 300752 } },
		{ params: { id: 815162 } }
	];
};
const { id } = Astro.params;
const dbConnection = await connectToDatabase();
const { db } = dbConnection;
const collection = db.collection('subsessions');
const subsessions = await collection.find({ 'session_results.2.results': { $elemMatch: { cust_id: Number(id) }}}).sort({_id: -1}).toArray();
const tableData = subsessions.map((subsession) => {
	const {
		subsession_id,
		track,
		corners_per_lap,
		allowed_licenses,
		license_category,
	} = subsession;
	// Current user in Race session;
	const {
		finish_position,
		finish_position_in_class,
		laps_lead,
		laps_complete,
		average_lap,
		best_lap_time,
		reason_out,
		champ_points,
		starting_position,
		starting_position_in_class,
		car_class_short_name,
		division_name,
		new_license_level,
		new_cpi,
		newi_rating,
		incidents,
		car_name,
		aggregate_champ_points,
	} = subsession.session_results[2].results.filter((v) => v.cust_id === Number(id))[0];
	const { group_name: License } = allowed_licenses.slice(0, 2).pop();

	return {
		subsession_id,
		Track: `${track.track_name} ${track.config_name !== 'N/A' ? track.config_name : ''}`,
		Corners: corners_per_lap,
		License,
		license_category,
		finish_position,
		finish_position_in_class,
		laps_lead,
		laps_complete,
		average_lap,
		best_lap_time,
		reason_out,
		champ_points,
		starting_position,
		starting_position_in_class,
		car_class_short_name,
		division_name,
		new_license_level,
		new_cpi,
		newi_rating,
		incidents,
		car_name,
		aggregate_champ_points,
	}
});
const keysToDisplay = new Set(Object.keys(tableData[0]));
const finalData = handleSessionResults({ keysToDisplay: new Set(Object.keys(tableData[0])), results: tableData });
const keysArray = Array.from(keysToDisplay);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/Stat-N-Track/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body class="bg-gray-900 text-white font-sans pt-2">
		<div class="grid grid-cols-1 pt-6">
			<table x-ref="Table" x-data="table" class="text-center col-span-1">
				<tr x-ref="Headings">{Object.keys(tableData[0]).map((key) => (<th id={`Table ${key} ${tableData.length}`} class="border-2" x-on:click="sort">{fieldIdToLabelMap.get(key) || key}</th>))}</tr>
				{finalData.map(
					(result, rowNumber) => (<tr x-ref={`Table ${rowNumber}`}>{Object.keys(result).map((key: string) => (<td x-ref={`Table ${keysArray[Number(key)]} ${rowNumber}`} class="border-2">{key === '0' ? (<a rel="prefetch" href={`/Stat-N-Track/subsession/${result[key]}`}>{result[key]}</a>): result[key]}</td>))}</tr>),
				)}
			</table>
		</div>
		<script>
			import Alpine from 'alpinejs';
			Alpine.data('table', () => ({
				sort() {
					const [tableName, columnName, rowCount, direction] = this.$el.id.split(' ');
					const rows = new Map();
					const keys = new Set();
					for (let rowNumber = 0; rowNumber < rowCount; rowNumber += 1) {
						const initialValue = this.$refs[`${tableName} ${columnName} ${rowNumber}`].innerText;
						const value = Number.isNaN(Number(initialValue)) ? initialValue : Number(initialValue);
						if (rows.get(value)) {
							rows.set(value, [...rows.get(value), rowNumber]);
						} else {
							rows.set(value, [rowNumber]);
							keys.add(value);
						}
					}
					const keysArray = Array.from(keys);
					const isNumbers = keysArray.filter((key) => typeof key === 'number').length;
					const internalSort = () => {
						if (isNumbers && (direction === 'ascending')) {
							return keysArray.sort((a, b) => {
								return b - a;
							});
						} else if (isNumbers && !direction) {
							return keysArray.sort((a, b) => {
								return a - b;
							});
						} else if (!isNumbers && direction === 'ascending') {
							return keysArray.sort();
						} else if (!isNumbers && !direction) {
							return keysArray.sort().reverse();
						}
					}
					this.$el.id = direction === 'ascending' ? `${tableName} ${columnName} ${rowCount}` : `${tableName} ${columnName} ${rowCount} ascending`;
					const rowElements = direction === 'ascending' ? internalSort().map((key) => key).map((key) => rows.get(key)).flat().map((value) => this.$refs[`${tableName} ${value}`].outerHTML) : internalSort().map((key) => key).map((key) => rows.get(key)).flat().map((value) => this.$refs[`${tableName} ${value}`].outerHTML);
					const tableHeadings = this.$refs.Headings.outerHTML;
					this.$refs.Table.innerHTML = `${tableHeadings}${rowElements.join('')}`;
				}
			}))
			Alpine.start();
		</script>
	</body>
</html>
