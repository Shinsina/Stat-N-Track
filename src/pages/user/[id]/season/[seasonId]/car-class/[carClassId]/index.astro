---
import {
  db,
  and,
  eq,
  sql,
  Standing,
  Subsession,
  SubsessionRaceResults,
} from "astro:db";
import DefaultLayout from "$lib/layouts/default.astro";
import handleResults from "$lib/utils/handle-session-results";
import fieldIdToLabelMap from "$lib/utils/field-id-to-label-map";
import lapTimeFields from "$lib/utils/lap-time-fields";
import parseLapTime from "$lib/utils/parse-lap-time";
import userIds from "$lib/utils/user-ids";
import type { Track } from "$lib/types";
export async function getStaticPaths() {
  const seasons = await db
    .select()
    .from(Standing)
    .where(sql`${Standing.cust_id} IN ${userIds}`);
  return seasons.map((season) => ({
    params: {
      id: Number(season.cust_id),
      seasonId: Number(season.season_id),
      carClassId: Number(season.car_class_id),
    },
  }));
}
const { id, seasonId, carClassId } = Astro.params;
const allSeasonSubsessions = await db
  .select()
  .from(Subsession)
  .where(eq(Subsession.season_id, Number(seasonId)));
const allSeasonRaceResultsForUser = await db
  .select()
  .from(SubsessionRaceResults)
  .where(
    and(
      eq(SubsessionRaceResults.cust_id, Number(id)),
      eq(SubsessionRaceResults.car_class_id, Number(carClassId))
    )
  );
const results = allSeasonSubsessions
  .filter((v) =>
    allSeasonRaceResultsForUser
      .map((w) => w.subsession_id)
      .includes(v.subsession_id)
  )
  .map((subsession) => {
    const {
      subsession_id,
      track,
      corners_per_lap,
      allowed_licenses,
      license_category,
    } = subsession;
    // Current user in Race session;
    const {
      finish_position,
      finish_position_in_class,
      laps_lead,
      laps_complete,
      average_lap,
      best_lap_time,
      reason_out,
      champ_points,
      starting_position,
      starting_position_in_class,
      car_class_short_name,
      division_name,
      new_license_level,
      new_cpi,
      newi_rating,
      incidents,
      car_name,
      aggregate_champ_points,
    } = allSeasonRaceResultsForUser.find(
      (v) => v.subsession_id === subsession_id
    ) || {};
    const { group_name: License } = Array.isArray(allowed_licenses)
      ? allowed_licenses.slice(0, 2).pop()
      : { group_name: "" };
      const assertTrackAsTrackType = () => track as Track;
      const trackInfo = assertTrackAsTrackType();
    return {
      subsession_id,
      Track: `${trackInfo.track_name} ${
        trackInfo.config_name !== "N/A" ? trackInfo.config_name : ""
      }`,
      Corners: corners_per_lap,
      License,
      license_category,
      finish_position,
      finish_position_in_class,
      laps_lead,
      laps_complete,
      average_lap,
      best_lap_time,
      reason_out,
      champ_points,
      starting_position,
      starting_position_in_class,
      car_class_short_name,
      division_name,
      new_license_level,
      new_cpi,
      newi_rating,
      incidents,
      car_name,
      aggregate_champ_points,
    };
  });
const keysToDisplay = new Set(Object.keys(results[0]));
const { keysArray, handledResults } = handleResults({ keysToDisplay, results });
const title = `Season information for season ID ${seasonId} - car class ID - ${carClassId} and user ID - ${id}`;
const description = title;
---

<DefaultLayout {title} {description}>
  <a
    class="underline"
    rel="prefetch"
    href=`/Stat-N-Track/user/${id}/season/${seasonId}/car-class/${carClassId}/season-summary`
  >
    <div class="text-center py-4 border-2">
      <p><b>View Season Summary</b></p>
    </div>
  </a>
  <div class="grid grid-cols-1 pt-6 overflow-x-scroll">
    <table x-ref="Table" x-data="table" class="text-center col-span-1">
      <tr x-ref="Headings"
        >{
          keysArray.map((key) => (
            <th
              id={`Table ${key} ${results.length}`}
              class="border-2"
              x-on:click="sort"
            >
              {fieldIdToLabelMap.get(key) || key}
            </th>
          ))
        }</tr
      >
      {
        handledResults.map((result, rowNumber) => (
          <tr x-ref={`Table ${rowNumber}`}>
            {Object.keys(result).map((key: string) => (
              <td
                x-ref={`Table ${keysArray[Number(key)]} ${rowNumber}`}
                id={`${keysArray[Number(key)]}~${rowNumber}~${result[key]}`}
                class="border-2"
              >
                {key === "0" ? (
                  <a
                    class="underline"
                    rel="prefetch"
                    href={`/Stat-N-Track/subsession/${result[key]}`}
                  >
                    {result[key]}
                  </a>
                ) : lapTimeFields.has(keysArray[Number(key)]) ? (
                  parseLapTime(Number(result[key]))
                ) : (
                  result[key]
                )}
              </td>
            ))}
          </tr>
        ))
      }
    </table>
  </div>
  <script>
    import Alpine from "alpinejs";
    import Table from "$lib/components/table/index.ts";
    Alpine.data("table", Table);
    Alpine.start();
  </script>
</DefaultLayout>
