---
import { db, eq, User, Car, CarClass, Season } from "astro:db";
import DefaultLayout from "$lib/layouts/default.astro";
import type {
  CarClass as CarClassType,
  SchedulingTableResult,
  Track,
} from "$lib/types";
export async function getStaticPaths() {
  const userIds = await db.selectDistinct({ id: User.cust_id }).from(User);
  return userIds.map(({ id }) => ({ params: { id } }));
}
const { id } = Astro.params;
const [user] = await db
  .select({
    carPackages: User.car_packages,
    trackPackages: User.track_packages,
  })
  .from(User)
  .where(eq(User.cust_id, id));
const { carPackages, trackPackages } = user;
const carIds = Array.isArray(carPackages)
  ? carPackages.map((carPackage) => carPackage.content_ids).flat()
  : [];
const trackIds = Array.isArray(trackPackages)
  ? trackPackages.map((trackPackage) => trackPackage.content_ids).flat()
  : [];
const cars = await db.select().from(Car);
const carsMap = new Map();
cars.forEach((car) => {
  const { car_id } = car;
  carsMap.set(car_id, car);
});
// @todo Improve this query to not have to do this
const carClassesResults = await db
  .select({
    carClassId: CarClass.car_class_id,
    carsInClass: CarClass.cars_in_class,
  })
  .from(CarClass);
const carClassIdsForCarIds = carClassesResults
  .filter((result: any) =>
    result.carsInClass.some((v: any) => carIds.includes(v.car_id))
  )
  .map((result) => result.carClassId);
// End comment of previous todo
const carClasses = await db.select().from(CarClass);
const carClassesMap = new Map();
carClasses.forEach((carClass) => {
  const { car_class_id, cars_in_class } = carClass;
  const carsInClass = Array.isArray(cars_in_class)
    ? cars_in_class.map((carInClass) => carsMap.get(carInClass.car_id))
    : [];
  carClassesMap.set(car_class_id, { ...carClass, cars_in_class: carsInClass });
});
const seasons = await db.select().from(Season);
const carClassIdSet = new Set(carClassIdsForCarIds);
const trackIdSet = new Set(trackIds);
const licenseGroupToNameMap: Record<string, string> = {
  "1": "Rookie",
  "2": "Class D",
  "3": "Class C",
  "4": "Class B",
  "5": "Class A",
};
const results: Array<SchedulingTableResult> = seasons
  .map((season) => {
    const { schedules, season_name, car_class_ids } = season;
    const carClassData: Array<CarClassType> = Array.isArray(car_class_ids)
      ? car_class_ids.map((car_class_id: number) =>
          carClassesMap.get(car_class_id)
        )
      : [];
    const tracks: Array<Track> = Array.isArray(schedules)
      ? schedules.map((schedule: any, index: number) => ({
          race_week_num: index + 1,
          ...schedule.track,
        }))
      : [];
    const ownedTrackWeeks: Array<number> = tracks
      .filter((track: Track) => trackIdSet.has(track.track_id))
      .map((track) => Number(track.race_week_num));
    const trackPercentageOwned = Math.round(
      (ownedTrackWeeks.length / tracks.length) * 100
    );
    const ownedCarClasses = Array.isArray(car_class_ids)
      ? car_class_ids.filter((carClassId: number) =>
          carClassIdSet.has(carClassId)
        )
      : [];
    return {
      "Season Name": String(season_name),
      "License Level": licenseGroupToNameMap[String(season.license_group)],
      carClassData,
      tracks,
      ownedTrackWeeks,
      "Own Car": ownedCarClasses.length ? "Yes" : "No",
      "Overall Track Percentage Owned": trackPercentageOwned,
    };
  })
  .sort(
    (a, b) =>
      b["Overall Track Percentage Owned"] - a["Overall Track Percentage Owned"]
  );
const keysToOmitInTable = new Set([
  "carClassData",
  "tracks",
  "ownedTrackWeeks",
]);
const title = `Scheduling - ${id}`;
const description = `Scheduling page for user ID: ${id}`;
---

<DefaultLayout {title} {description}>
  <div class="grid grid-cols-4 text-center pt-6">
    {
      Object.keys(results[0])
        .filter((key) => !keysToOmitInTable.has(key))
        .map((key) => <div class="border-2 col-span-1">{key}</div>)
    }
    {
      results.map((result) => (
        <div
          class="col-span-4 grid grid-cols-4"
          x-data="dropdown"
          x-on:click="toggle"
        >
          {Object.keys(result)
            .filter(
              (key): key is keyof SchedulingTableResult =>
                !keysToOmitInTable.has(key)
            )
            .map((key) => (
              <div class="border-2 col-span-1">{result[key]}</div>
            ))}
          <div
            class="col-span-4 grid grid-cols-4"
            x-cloak
            x-show="opened"
            x-collapse
          >
            <div class="col-span-2 border-x-2">
              {result.carClassData.map((carClass) => (
                <div>
                  {carClass.cars_in_class.map((car) =>
                    carIds.includes(car.car_id) ? (
                      <div class="bg-green-950 grid grid-cols-2">
                        <div class="col-span-1">Car Class: {carClass.name}</div>
                        <div class="col-span-1">{car.car_name}</div>
                      </div>
                    ) : (
                      <div class="bg-red-950 grid grid-cols-2">
                        <div class="col-span-1">Car Class: {carClass.name}</div>
                        <div class="col-span-1">{car.car_name}</div>
                      </div>
                    )
                  )}
                </div>
              ))}
            </div>
            <div class="col-span-2 border-x-2">
              {result.tracks.map((track) =>
                result.ownedTrackWeeks.includes(Number(track.race_week_num)) ? (
                  <div class="bg-green-950">
                    {track.race_week_num}. {track.track_name}{" "}
                    {track.config_name}
                  </div>
                ) : (
                  <div class="bg-red-950">
                    {track.race_week_num}. {track.track_name}{" "}
                    {track.config_name}
                  </div>
                )
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>
  <script>
    import Alpine from "alpinejs";
    // @ts-expect-error
    import collapse from "@alpinejs/collapse";
    Alpine.plugin(collapse);
    Alpine.data("dropdown", () => ({
      opened: false,
      toggle() {
        this.opened = !this.opened;
      },
    }));
    Alpine.start();
  </script>
</DefaultLayout>
