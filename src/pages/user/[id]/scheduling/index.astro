---
import { connectToDatabase } from "$lib/mongodb";
import DefaultLayout from "$lib/layouts/default.astro";
// @todo Properly assert types in this file
export async function getStaticPaths() {
  const dbConnection = await connectToDatabase();
  const db = dbConnection.db;
  const userCollection = db.collection("users");
  const userIds = await userCollection.distinct("_id", {});
  return userIds.map((id) => ({ params: { id } }));
}
const { id } = Astro.params;
const dbConnection = await connectToDatabase();
const db = dbConnection.db;
const userCollection = db.collection("users");
const carPackages = await userCollection
  .aggregate([
    {
      $match: {
        _id: Number(id),
      },
    },
    {
      $unwind: "$car_packages",
    },
    {
      $replaceRoot: {
        newRoot: {
          $mergeObjects: ["$car_packages", "$$ROOT"],
        },
      },
    },
    {
      $project: {
        _id: 0,
        content_ids: 1,
      },
    },
  ])
  .toArray();
const carIds = carPackages.map((carPackage) => carPackage.content_ids).flat();
const trackPackages = await userCollection
  .aggregate([
    {
      $match: {
        _id: Number(id),
      },
    },
    {
      $unwind: "$track_packages",
    },
    {
      $replaceRoot: {
        newRoot: {
          $mergeObjects: ["$track_packages", "$$ROOT"],
        },
      },
    },
    {
      $project: {
        _id: 0,
        content_ids: 1,
      },
    },
  ])
  .toArray();
const trackIds = trackPackages
  .map((trackPackage) => trackPackage.content_ids)
  .flat();
const carsCollection = db.collection("cars");
const cars = await carsCollection.find().toArray();
const carsMap = new Map();
cars.forEach((car) => {
  const { car_id } = car;
  carsMap.set(car_id, car);
});
const carClassCollection = db.collection("carclasses");
const carClassIdsForCarIds = await carClassCollection.distinct("car_class_id", {
  "cars_in_class.car_id": { $in: carIds },
});
const carClasses = await carClassCollection.find().toArray();
const carClassesMap = new Map();
carClasses.forEach((carClass) => {
  const { car_class_id, cars_in_class } = carClass;
  const carsInClass = cars_in_class.map((carInClass) =>
    carsMap.get(carInClass.car_id)
  );
  carClassesMap.set(car_class_id, { ...carClass, cars_in_class: carsInClass });
});
const seasonsCollection = db.collection("seasons");
const seasons = await seasonsCollection.find({}, {}).toArray();
const carClassIdSet = new Set(carClassIdsForCarIds);
const trackIdSet = new Set(trackIds);
const licenseGroupToNameMap: Record<string, string> = {
  "1": "Rookie",
  "2": "Class D",
  "3": "Class C",
  "4": "Class B",
  "5": "Class A",
};
const results = seasons
  .map((season) => {
    const { schedules, season_name, car_class_ids } = season;
    const carClassData = car_class_ids.map((car_class_id: number) =>
      carClassesMap.get(car_class_id)
    );
    const tracks: Array<Record<string, unknown>> = schedules.map(
      (schedule: any, index: number) => ({
        week: index + 1,
        ...schedule.track,
      })
    );
    const ownedTrackWeeks: Array<number> = tracks
      .filter((track: Record<string, unknown>) =>
        trackIdSet.has(track.track_id)
      )
      .map((track: Record<string, unknown>) => Number(track.week));
    const trackPercentageOwned = Math.round(
      (ownedTrackWeeks.length / tracks.length) * 100
    );
    const ownedCarClasses = car_class_ids.filter((carClassId: number) =>
      carClassIdSet.has(carClassId)
    );
    return {
      "Season Name": String(season_name),
      "License Level": licenseGroupToNameMap[String(season.license_group)],
      carClassData,
      tracks,
      ownedTrackWeeks,
      "Own Car": ownedCarClasses.length ? "Yes" : "No",
      "Overall Track Percentage Owned": trackPercentageOwned,
    };
  })
  .sort(
    (a, b) =>
      b["Overall Track Percentage Owned"] - a["Overall Track Percentage Owned"]
  );
const keysToOmitInTable = new Set([
  "carClassData",
  "tracks",
  "ownedTrackWeeks",
]);
---

<DefaultLayout>
  <div class="grid grid-cols-4 text-center pt-6">
    {
      Object.keys(results[0])
        .filter((key) => !keysToOmitInTable.has(key))
        .map((key) => <div class="border-2 col-span-1">{key}</div>)
    }
    {
      results.map((result) => (
        <div
          class="col-span-4 grid grid-cols-4"
          x-data="dropdown"
          x-on:click="toggle"
        >
          {Object.keys(result)
            .filter((key) => !keysToOmitInTable.has(key))
            .map((key: string) => (
              <div class="border-2 col-span-1">{result[key]}</div>
            ))}
          <div
            class="col-span-4 grid grid-cols-4"
            x-cloak
            x-show="opened"
            x-collapse
          >
            <div class="col-span-2 border-x-2">
              {result.carClassData.map((carClass) => (
                <div>
                  {carClass.cars_in_class.map((car) =>
                    carIds.includes(car.car_id) ? (
                      <div class="bg-green-950 grid grid-cols-2">
                        <div class="col-span-1">Car Class: {carClass.name}</div>
                        <div class="col-span-1">{car.car_name}</div>
                      </div>
                    ) : (
                      <div class="bg-red-950 grid grid-cols-2">
                        <div class="col-span-1">Car Class: {carClass.name}</div>
                        <div class="col-span-1">{car.car_name}</div>
                      </div>
                    )
                  )}
                </div>
              ))}
            </div>
            <div class="col-span-2 border-x-2">
              {result.tracks.map((track) =>
                result.ownedTrackWeeks.includes(Number(track.week)) ? (
                  <div class="bg-green-950">
                    {track.week}. {track.track_name} {track.config_name}
                  </div>
                ) : (
                  <div class="bg-red-950">
                    {track.week}. {track.track_name} {track.config_name}
                  </div>
                )
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>
  <script>
    import Alpine from "alpinejs";
    import collapse from "@alpinejs/collapse";
    Alpine.plugin(collapse);
    Alpine.data("dropdown", () => ({
      opened: false,
      toggle() {
        this.opened = !this.opened;
      },
    }));
    Alpine.start();
  </script>
</DefaultLayout>
