---
import handleSessionResults from '$lib/utils/handle-session-results';
import fieldIdToLabelMap from '$lib/utils/field-id-to-label-map';
import type { Session } from '$lib/types/index';
interface Props {
  session: Session,
  keysToDisplay: Set<string>
}
const { session, keysToDisplay } = Astro.props;
const {
  simsession_name,
  simsession_type_name,
  simsession_type,
  simsession_number,
  results
} = session || {};
const handledSessionResults = handleSessionResults({ keysToDisplay: keysToDisplay || new Set([]), results: results || [] });
const keysArray = Array.from(keysToDisplay);
const typeNameJoined = simsession_type_name ? simsession_type_name.split(' ').join('') : simsession_name;
---
<div class="grid grid-cols-1">
  <table class="text-center col-span-1">
    <tr class="bg-gray-500">
      <th class="border-2">Name</th>
      <th class="border-2">Type</th>
      <th class="border-2">Type ID</th>
      <th class="border-2">Session ID</th>
    </tr>
    <tr>
      <td class="border-2">{simsession_name}</td>
      <td class="border-2">{simsession_type_name}</td>
      <td class="border-2">{simsession_type}</td>
      <td class="border-2">{simsession_number}</td>
    </tr>
  </table>
</div>
<div class="grid grid-cols-1 pt-6">
  <table x-ref={typeNameJoined} class="text-center col-span-1">
    <tr x-ref={`${typeNameJoined} Table Headings`}>{keysArray.map((key) => (<th id={`${typeNameJoined} ${key} ${handledSessionResults.length}`} class="border-2" x-on:click="sort">{fieldIdToLabelMap.get(key) || key}</th>))}</tr>
    {handledSessionResults.map(
      (result, rowNumber) => (<tr x-ref={`${typeNameJoined} ${rowNumber}`}>{result.map((value: string|number, index: number) => (<td x-ref={`${typeNameJoined} ${keysArray[index]} ${rowNumber}`} class="border-2">{value}</td>))}</tr>),
    )}
  </table>
</div>
