---
import type { Session, SessionResult, Subsession } from "$lib/types";
interface Props {
  subsession: Subsession;
  sessions: Array<Session>;
}
const { subsession, sessions } = Astro.props;
const relevantIds = Object.keys(subsession)
  .sort()
  .filter(
    (key) =>
      key.match(/_id$/) &&
      Number(JSON.stringify(subsession[key as keyof Subsession])) > 0
  )
  .map(
    (key) => `${key}: ${JSON.stringify(subsession[key as keyof Subsession])}`
  );
const relevantIdMap: Record<string, Set<number>> = {};
const excludeKeys = new Set(["cust_id", "reason_out_id"]);
sessions.forEach((session: Session) => {
  const { results } = session;
  results.forEach((result) => {
    Object.keys(result).forEach((key) => {
      if (key.match(/_id$/) && !excludeKeys.has(key)) {
        if (relevantIdMap[key]) {
          relevantIdMap[key].add(Number(result[key as keyof SessionResult]));
        } else {
          relevantIdMap[key] = new Set([
            Number(result[key as keyof SessionResult]),
          ]);
        }
      }
    });
  });
});
const otherRelevantIdsList = Object.keys(relevantIdMap)
  .sort()
  .map((key) => `${key}: ${Array.from(relevantIdMap[key]).join(", ")}`);
---

<div class="text-center row-span-1">
  Relevant IDs
  {relevantIds.map((id) => <p>{id}</p>)}
  {otherRelevantIdsList.map((value) => <p>{value}</p>)}
</div>
